name: Extension Validation

on:
  pull_request:
  push:
    branches:
      - main
      - 5.*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-extensions:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0  # Fetch full history for git diff
        
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
          
      - name: Run repository content validation
        run: |
          python scripts/check_repository_content.py \
            --output-format markdown > repository-content-report.md || true

      - name: Get changed files
        run: |
          echo "Event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull requests, compare against the base branch
            BASE_REF="${{ github.event.pull_request.base.ref }}"
            echo "Base ref: $BASE_REF"
            # Try different approaches to get changed files
            if git diff --name-only "origin/$BASE_REF"...HEAD > changed_files.txt 2>/dev/null; then
              echo "Used origin/$BASE_REF as base"
            elif git diff --name-only "origin/main"...HEAD > changed_files.txt 2>/dev/null; then
              echo "Used origin/main as base"
            else
              echo "Fallback: using all JSON files"
              ls *.json > changed_files.txt 2>/dev/null || echo "" > changed_files.txt
            fi
          else
            # For pushes, compare against the previous commit or use all files
            if git diff --name-only HEAD~1...HEAD > changed_files.txt 2>/dev/null; then
              echo "Used HEAD~1 as base"
            else
              echo "Fallback: using all JSON files"
              ls *.json > changed_files.txt 2>/dev/null || echo "" > changed_files.txt
            fi
          fi
          echo "Changed files:"
          cat changed_files.txt

      - name: Run extension validation
        run: |
          # Filter changed files to only include JSON files
          if [ -s changed_files.txt ]; then
            # Filter for JSON files only
            grep '\.json$' changed_files.txt > json_files.txt || echo "" > json_files.txt
            if [ -s json_files.txt ]; then
              echo "Validating changed JSON files:"
              cat json_files.txt
              python scripts/check_description_files.py \
                --report-file extension-validation-report.md \
                --extension-descriptions-folder . \
                $(cat json_files.txt | tr '\n' ' ') || true
            else
              echo "No JSON files changed, creating empty report"
              echo "# Extension Validation Report" > extension-validation-report.md
              echo "" >> extension-validation-report.md
              echo "No extension JSON files were changed in this PR." >> extension-validation-report.md
            fi
          else
            # If no changed files detected, validate all JSON files
            echo "No changed files detected, validating all JSON files"
            python scripts/check_description_files.py \
              --report-file extension-validation-report.md \
              --extension-descriptions-folder . \
              *.json || true
          fi
            
      - name: Combine validation reports
        if: always()
        run: |
          if [ -f repository-content-report.md ]; then
            cat repository-content-report.md >> validation-report.md
          else
            echo "❌ Repository content validation report not generated" >> validation-report.md
          fi
          echo "" >> validation-report.md
          if [ -f extension-validation-report.md ]; then
            cat extension-validation-report.md >> validation-report.md
          else
            echo "❌ Extension validation report not generated" >> validation-report.md
          fi
            
      - name: Display validation summary
        if: always()
        run: |
          echo "## Validation Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f validation-report.md ]; then
            cat validation-report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Validation report not generated" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Upload validation reports
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: validation-reports
          path: |
            validation-report.md
            repository-content-report.md
            extension-validation-report.md
            changed_files.txt
            json_files.txt
          retention-days: 30
          
      - name: Comment PR with report
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@e69ef5462fd455e02edcaf4dd7708eda96b9eda0 # v7.0.1
        with:
          script: |
            const fs = require('fs');
            
            // Check if validation report exists
            if (!fs.existsSync('validation-report.md')) {
              console.log('Validation report not found');
              return;
            }
            
            const report = fs.readFileSync('validation-report.md', 'utf8');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Combined Validation Report')
            );
            
            const commentBody = `<!-- extension-validation-report -->
            ${report}

            ---
            *This report was automatically generated by the Extension Validation workflow.*`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
